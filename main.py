#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 13, 2018 09:31:31 PM CET  platform: Linux

import sys
from engine import *
from tkinter import messagebox

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import ui_support
from price_conf_panel import *
from algorithm_conf_panel import *
import logging
from utils import *

logging.basicConfig(level=logging.DEBUG)


def vp_start_gui():
    """Starting point when module is the main routine."""
    global top, app
    app = tk.Tk()
    ui_support.set_Tk_var()
    top = Window(app)
    top.price_panel.old_matrix_checkbox.select()
    top.price_panel.select_old()
    top.generic_panel.dynamic_stop_checkbox.select()
    top.generic_panel.select_dynamic()
    ui_support.init(app, top)
    app.mainloop()


top = None


def create_window(root, *args, **kwargs):
    """Starting point when module is imported by another program."""
    global top, rt
    rt = root
    top = tk.Toplevel(root)
    ui_support.set_Tk_var()
    window = Window(top)
    ui_support.init(top, window, *args, **kwargs)
    return top, window


def destroy_window():
    global top
    top.destroy()
    top = None


class Window:
    def __init__(self, top=None):
        self.engine = Engine()
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.',background=[('selected', _compcolor), ('active', _ana2color)])

        top.geometry("490x684+625+127")
        top.title("Komiwojad≈ºer")
        top.configure(cursor="arrow")
        top.configure(highlightcolor="black")

        self.price_panel = PriceConfigPanel(top)
        self.generic_panel = AlgorithmConfigPanel(top)

        self.ui_additions = ui_support.UIAdditions(top,
                                                   self.run_exact_solution,
                                                   self.generic_algorithm_solution)

    def generate_price_matrix(self):
        self.engine.num_of_cities = self.price_panel.get_num_of_cities()
        self.engine.min_price = self.price_panel.get_min_price()
        self.engine.max_price = self.price_panel.get_max_price()
        self.engine.generate_new_prices()

    def run_exact_solution(self):
        if self.price_panel.create_new_prices:
            if self.price_panel.check_matrix_conf():
                self.generate_price_matrix()
                self.engine.exact_solution()
        else:
            self.engine.exact_solution()

    def run_generic_algorithm(self):
        self.set_generic_algorithm_settings()
        self.engine.genetic_algorithm()

    def set_generic_algorithm_settings(self):
        self.engine.set_algorithm_settings(self.generic_panel.get_population(),
                                           self.generic_panel.get_mixing(),
                                           self.generic_panel.get_mutation(),
                                           self.generic_panel.stop_condition,
                                           self.generic_panel.get_generation_range(),
                                           self.generic_panel.get_generation_end())

    def is_all_conf_correct(self):
        return AND(self.price_panel.check_matrix_conf(),
                   self.generic_panel.check_algorithm_conf())

    def generic_algorithm_solution(self):
        if self.price_panel.create_new_prices:
            if self.is_all_conf_correct():
                self.generate_price_matrix()
                self.run_generic_algorithm()
        else:
            if self.generic_panel.check_algorithm_conf():
                self.run_generic_algorithm()


if __name__ == '__main__':
    vp_start_gui()





