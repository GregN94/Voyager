#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 13, 2018 09:31:31 PM CET  platform: Linux

import sys
from main import *
from tkinter import messagebox

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import conf_ui_support
from price_conf_window import *
from generic_conf_window import *
import logging

logging.basicConfig(level=logging.DEBUG)


def vp_start_gui():
    """Starting point when module is the main routine."""
    global top, app
    app = tk.Tk()
    conf_ui_support.set_Tk_var()
    top = Window(app)
    top.price_conf_win.old_matrix_checkbox.select()
    top.price_conf_win.select_old()
    top.generic_conf_win.dynamic_stop_checkbox.select()
    top.generic_conf_win.select_dynamic()
    conf_ui_support.init(app, top)
    app.mainloop()


top = None


def create_window(root, *args, **kwargs):
    """Starting point when module is imported by another program."""
    global top, rt
    rt = root
    top = tk.Toplevel(root)
    conf_ui_support.set_Tk_var()
    window = Window(top)
    conf_ui_support.init(top, window, *args, **kwargs)
    return top, window


def destroy_window():
    global top
    top.destroy()
    top = None


class Window:
    def __init__(self, top=None):
        self.engine = Engine()
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.',background=[('selected', _compcolor), ('active', _ana2color)])

        top.geometry("490x684+625+127")
        top.title("Comi Voyager")
        top.configure(cursor="arrow")
        top.configure(highlightcolor="black")

        self.price_conf_win = PriceConfigWindow(top)
        self.generic_conf_win = GenericConfigWindow(top)

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.49, rely=0.088, relheight=0.263)
        self.TSeparator1.configure(orient="vertical")

        self.run_simple_solution_btn = tk.Button(top)
        self.run_simple_solution_btn.place(relx=0.735, rely=0.395, height=31, width=53)
        self.run_simple_solution_btn.configure(activebackground="#f9f9f9")
        self.run_simple_solution_btn.configure(background="#d8a720")
        self.run_simple_solution_btn.configure(text='''Run''')
        self.run_simple_solution_btn.configure(command=self.run_simple_solution)

        self.simple_solution_lbl = tk.Label(top)
        self.simple_solution_lbl.place(relx=0.122, rely=0.395, height=31, width=295)
        self.simple_solution_lbl.configure(activebackground="#f9f9f9")
        self.simple_solution_lbl.configure(text="Run simple solution, not generic algorithms")

        self.menu_bar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menu_bar)

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(relx=0.469, rely=0.76, relheight=0.132)
        self.TSeparator2.configure(orient="vertical")

        self.TSeparator3 = ttk.Separator(top)
        self.TSeparator3.place(relx=0.265, rely=0.468, relwidth=0.408)

        self.TSeparator4 = ttk.Separator(top)
        self.TSeparator4.place(relx=0.265, rely=0.673, relwidth=0.408)

        self.run_generic_lbl = tk.Label(top)
        self.run_generic_lbl.place(relx=0.122, rely=0.936, height=21, width=156)
        self.run_generic_lbl.configure(activebackground="#f9f9f9")
        self.run_generic_lbl.configure(text="Run generic algorithm")

        self.run_generic_btn = tk.Button(top)
        self.run_generic_btn.place(relx=0.49, rely=0.921, height=41, width=83)
        self.run_generic_btn.configure(activebackground="#f9f9f9")
        self.run_generic_btn.configure(background="#8dd868")
        self.run_generic_btn.configure(text="Run")
        self.run_generic_btn.configure(command=self.run_generic_algorithm)

    def generate_price_matrix(self):
        self.engine.num_of_cities = int(self.price_conf_win.num_of_cities_entry.get())
        self.engine.min_price = int(self.price_conf_win.min_price_entry.get())
        self.engine.max_price = int(self.price_conf_win.max_price_entry.get())
        self.engine.generate_new_prices()

    def run_simple_solution(self):
        if self.price_conf_win.create_new_prices:
            if self.price_conf_win.check_matrix_configuration():
                self.generate_price_matrix()
                self.engine.run_exact_solution()
                messagebox.showinfo("Simple solution",
                                    "Running simple solution, it might take a while")
        else:
            if not self.engine.load_prices():
                messagebox.showinfo("Default configuration",
                                    "There was no previous configuration, running with default configuration")
            self.engine.run_exact_solution()
            messagebox.showinfo("Simple solution",
                                "Running simple solution, it might take a while")

    def run_generic_algorithm(self):
        logging.info("Generic algorithm")
        print(self.generic_conf_win.mutation_percentage_box.get())


if __name__ == '__main__':
    vp_start_gui()





